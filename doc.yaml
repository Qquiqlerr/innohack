openapi: 3.0.0
info:
  title: Project Management API
  description: API для управления проектами и задачами.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: http://localhost:8080/api/v1
    description: Локальный сервер для разработки
paths:
  /projects:
    get:
      summary: Получить список всех проектов
      description: Получить список проектов
      tags:
        - api
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Создать новый проект
      description: Создать проект с необходимыми полями
      tags:
        - api
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Проект успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Ошибка в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /projects/{id}:
    put:
      summary: Обновить существующий проект
      description: Обновить проект по его ID
      tags:
        - api
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Проект успешно обновлен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Проект не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Удалить проект
      description: Удалить проект по его ID
      tags:
        - api
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Проект успешно удален
        '404':
          description: Проект не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tasks:
    get:
      summary: Получить список всех задач
      description: Получить список задач с возможностью фильтрации по `projectID` и `status`
      tags:
        - tasks
      parameters:
        - name: projectID
          in: query
          description: ID проекта для фильтрации задач
          required: false
          schema:
            type: integer
        - name: status
          in: query
          description: Статус задач для фильтрации(1 - ожидает, 2 - в работе, 3 - выполнена)
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Успешный ответ
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          description: Ошибка сервера
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Создать новую задачу
      description: Создать задачу с необходимыми полями
      tags:
        - tasks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '201':
          description: Задача успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Ошибка в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /tasks/{id}:
    put:
      summary: Обновить задачу
      description: Обновить задачу по ее ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Задача успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Неверные данные
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Удалить задачу
      description: Удалить задачу по ее ID
      tags:
        - tasks
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Задача успешно удалена
        '404':
          description: Задача не найдена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      summary: Аутентификация пользователя
      description: Аутентифицировать пользователя по email и паролю
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Аутентификация успешна
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Неверные данные для входа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/register:
    post:
      summary: Регистрация пользователя
      description: Зарегистрировать нового пользователя
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Пользователь успешно зарегистрирован
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Ошибка в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Project:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    Task:
      type: object
      properties:
        project_id:
          type: integer
        name:
          type: string
        description:
          type: string
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      properties:
        token:
          type: string
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
